// Synapse Framework Getting Started Wizard
// Interactive step-by-step guide

class SynapseWizard {
  constructor() {
    this.currentStep = 0;
    this.steps = [
      {
        title: "Welcome to Synapse",
        description: "Let's get you started with the most powerful TypeScript framework with zero dependencies.",
        content: "Synapse is a comprehensive TypeScript framework designed for modern web development. It provides everything you need to build robust, scalable applications without external dependencies.",
        codeExample: `// Install Synapse
npm install @snps/core @snps/routing @snps/database

// Or use individual packages
npm install @snps/auth @snps/templating @snps/testing`
      },
      {
        title: "Core Setup",
        description: "Set up your first Synapse application with the core framework.",
        content: "Start by creating a basic server with Synapse Core. This gives you HTTP server capabilities, middleware support, and performance monitoring.",
        codeExample: `import { Server } from '@snps/core';

const app = new Server({
  port: 3000,
  host: 'localhost'
});

app.get('/', (req, res) => {
  res.json({ message: 'Hello from Synapse!' });
});

app.start(() => {
  console.log('ðŸš€ Server running on http://localhost:3000');
});`
      },
      {
        title: "Routing System",
        description: "Learn how to handle routes and middleware with Synapse Routing.",
        content: "Synapse provides a powerful routing system with path matching, parameters, and middleware support.",
        codeExample: `import { Router } from '@snps/routing';

const router = new Router();

// Basic routes
router.get('/users', (req, res) => {
  res.json({ users: [] });
});

router.post('/users', (req, res) => {
  res.json({ message: 'User created' });
});

// Route with parameters
router.get('/users/:id', (req, res) => {
  res.json({ user: { id: req.params.id } });
});

// Middleware
router.use((req, res, next) => {
  console.log('Request:', req.method, req.url);
  next();
});`
      },
      {
        title: "Database Integration",
        description: "Connect to your database using Synapse Database with ORM capabilities.",
        content: "Synapse Database provides an in-memory database with ORM-like functionality, QueryBuilder, and Model classes.",
        codeExample: `import { Database, Model } from '@snps/database';

// Define a model
class User extends Model {
  static tableName = 'users';
  
  constructor(data) {
    super(data);
    this.name = data.name;
    this.email = data.email;
  }
}

// Initialize database
const db = new Database();
await db.connect();

// Create and save a user
const user = new User({
  name: 'John Doe',
  email: 'john@example.com'
});

await user.save();

// Query users
const users = await db.find('users', { name: 'John Doe' });`
      },
      {
        title: "Authentication & Security",
        description: "Implement secure authentication with Synapse Auth.",
        content: "Synapse Auth provides comprehensive authentication and authorization with OAuth2, JWT, and security features.",
        codeExample: `import { AuthManager } from '@snps/auth';

const auth = new AuthManager({
  secretKey: process.env.JWT_SECRET,
  tokenExpiry: '24h'
});

// User registration
app.post('/register', async (req, res) => {
  const { email, password } = req.body;
  
  try {
    const user = await auth.register(email, password);
    const token = auth.generateToken(user);
    
    res.json({ user, token });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Protected route
app.get('/profile', auth.authenticate, (req, res) => {
  res.json({ user: req.user });
});`
      },
      {
        title: "Templating Engine",
        description: "Create dynamic views with Synapse Templating.",
        content: "Synapse includes a powerful templating engine that supports .webml files with variables, conditionals, and loops.",
        codeExample: `import { TemplateEngine } from '@snps/templating';

const templateEngine = new TemplateEngine();

// Render a template
const html = await templateEngine.render('welcome.webml', {
  title: 'Welcome to Synapse',
  user: { name: 'John Doe' },
  features: ['Zero Dependencies', 'TypeScript', 'ORM']
});

// Template file: welcome.webml
/*
<!DOCTYPE html>
<html>
<head>
    <title>{{title}}</title>
</head>
<body>
    <h1>Hello, {{user.name}}!</h1>
    <ul>
        {% for feature in features %}
        <li>{{feature}}</li>
        {% endfor %}
    </ul>
</body>
</html>
*/`
      },
      {
        title: "Testing Framework",
        description: "Write comprehensive tests with Synapse Testing.",
        content: "Synapse Testing provides a complete testing framework with mocks, spies, stubs, and 100% coverage tools.",
        codeExample: `import { TestRunner, Mock, Spy } from '@snps/testing';

const testRunner = new TestRunner();

// Basic test
testRunner.test('User creation', async () => {
  const user = new User({ name: 'John', email: 'john@test.com' });
  expect(user.name).toBe('John');
  expect(user.email).toBe('john@test.com');
});

// Test with mocks
testRunner.test('API endpoint', async () => {
  const mockReq = Mock.createRequest({ body: { name: 'John' } });
  const mockRes = Mock.createResponse();
  
  await userController.create(mockReq, mockRes);
  
  expect(mockRes.status).toHaveBeenCalledWith(201);
  expect(mockRes.json).toHaveBeenCalledWith(
    expect.objectContaining({ name: 'John' })
  );
});

// Run tests
testRunner.run();`
      },
      {
        title: "Advanced Features",
        description: "Explore Synapse's advanced capabilities.",
        content: "Synapse includes many advanced features like GraphQL, microservices, AI/ML integration, and more.",
        codeExample: `// GraphQL Support
import { GraphQLServer } from '@snps/graphql';

const server = new GraphQLServer({
  typeDefs: \`
    type User {
      id: ID!
      name: String!
      email: String!
    }
    
    type Query {
      users: [User]
    }
  \`,
  resolvers: {
    Query: {
      users: () => db.find('users')
    }
  }
});

// AI Integration
import { AIManager } from '@snps/ai';

const ai = new AIManager();
const response = await ai.generateText('Explain TypeScript');
console.log(response);`
      },
      {
        title: "Performance Optimization",
        description: "Optimize your Synapse application for production.",
        content: "Synapse includes built-in performance monitoring, caching, and optimization features.",
        codeExample: `import { Server } from '@snps/core';
import { CacheManager } from '@snps/core';

const app = new Server({
  port: 3000,
  performanceMonitoring: true,
  caching: {
    enabled: true,
    strategy: 'lru',
    maxSize: 1000
  }
});

// Enable caching for expensive operations
app.get('/expensive-data', async (req, res) => {
  const cacheKey = 'expensive-data';
  let data = await app.cache.get(cacheKey);
  
  if (!data) {
    data = await performExpensiveOperation();
    await app.cache.set(cacheKey, data, 3600); // 1 hour
  }
  
  res.json(data);
});`
      },
      {
        title: "Deployment",
        description: "Deploy your Synapse application to production.",
        content: "Learn how to deploy your Synapse application using various deployment strategies.",
        codeExample: `// Docker deployment
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY dist/ ./dist/
EXPOSE 3000
CMD ["node", "dist/index.js"]

// Environment configuration
const config = {
  port: process.env.PORT || 3000,
  database: {
    url: process.env.DATABASE_URL
  },
  auth: {
    secretKey: process.env.JWT_SECRET
  }
};`
      },
      {
        title: "Monitoring & Debugging",
        description: "Monitor and debug your Synapse application.",
        content: "Synapse provides comprehensive monitoring, logging, and debugging tools.",
        codeExample: `import { Logger, MetricsCollector } from '@snps/core';

const logger = new Logger({
  level: 'info',
  format: 'json'
});

const metrics = new MetricsCollector();

// Logging
logger.info('Application started', { port: 3000 });
logger.error('Database connection failed', { error: err.message });

// Metrics
metrics.increment('requests.total');
metrics.timing('request.duration', duration);
metrics.gauge('memory.usage', process.memoryUsage().heapUsed);`
      },
      {
        title: "Congratulations!",
        description: "You're ready to build amazing applications with Synapse!",
        content: "You've learned the fundamentals of Synapse framework. Now you can build robust, scalable applications with zero dependencies.",
        codeExample: `// Your complete Synapse application
import { Server } from '@snps/core';
import { Router } from '@snps/routing';
import { Database } from '@snps/database';
import { AuthManager } from '@snps/auth';
import { TemplateEngine } from '@snps/templating';

const app = new Server({ port: 3000 });
const router = new Router();
const db = new Database();
const auth = new AuthManager();
const templates = new TemplateEngine();

// Your amazing application logic here
app.use(router);
await db.connect();

app.start(() => {
  console.log('ðŸŽ‰ Your Synapse app is running!');
});`
      }
    ];
    
    this.init();
  }
  
  init() {
    this.renderStep();
    this.bindEvents();
    this.updateProgress();
  }
  
  renderStep() {
    const step = this.steps[this.currentStep];
    const stepContainer = document.querySelector('.step-container');
    
    if (stepContainer) {
      stepContainer.innerHTML = `
        <h2>${step.title}</h2>
        <p>${step.description}</p>
        <div class="step-content">
          ${step.content}
        </div>
        <div class="code-example">
          <h4>Code Example:</h4>
          <pre><code>${step.codeExample || 'No code example available'}</code></pre>
          <button class="btn btn-secondary copy-code">Copy Code</button>
        </div>
        <div class="step-actions">
          ${this.currentStep > 0 ? '<button class="btn btn-outline prev-step">Previous</button>' : ''}
          ${this.currentStep < this.steps.length - 1 ? '<button class="btn btn-primary next-step">Next Step</button>' : '<button class="btn btn-success complete-wizard">Complete</button>'}
        </div>
      `;
    }
    
    // Re-bind copy button events
    this.bindCopyButtons();
  }
  
  bindEvents() {
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('next-step')) {
        this.nextStep();
      } else if (e.target.classList.contains('prev-step')) {
        this.previousStep();
      } else if (e.target.classList.contains('complete-wizard')) {
        this.completeWizard();
      }
    });
  }
  
  bindCopyButtons() {
    document.querySelectorAll('.copy-code').forEach(button => {
      button.addEventListener('click', async function() {
        const codeBlock = this.parentElement.querySelector('code');
        const text = codeBlock.textContent;
        
        try {
          await navigator.clipboard.writeText(text);
          this.textContent = 'Copied!';
          this.style.background = 'var(--success-green)';
          
          setTimeout(() => {
            this.textContent = 'Copy Code';
            this.style.background = '';
          }, 2000);
        } catch (err) {
          console.error('Failed to copy text: ', err);
        }
      });
    });
  }
  
  nextStep() {
    if (this.currentStep < this.steps.length - 1) {
      this.currentStep++;
      this.renderStep();
      this.updateProgress();
      this.animateStep();
    }
  }
  
  previousStep() {
    if (this.currentStep > 0) {
      this.currentStep--;
      this.renderStep();
      this.updateProgress();
      this.animateStep();
    }
  }
  
  completeWizard() {
    const wizardContainer = document.querySelector('.wizard-container');
    if (wizardContainer) {
      wizardContainer.innerHTML = `
        <div class="wizard-complete">
          <div class="success-icon">ðŸŽ‰</div>
          <h2>Congratulations!</h2>
          <p>You've completed the Synapse getting started wizard. You're now ready to build amazing applications!</p>
          <div class="completion-actions">
            <a href="./api" class="btn btn-primary">Explore API</a>
            <a href="./examples" class="btn btn-secondary">View Examples</a>
            <a href="./" class="btn btn-outline">Back to Home</a>
          </div>
        </div>
      `;
    }
  }
  
  updateProgress() {
    const progressFill = document.querySelector('.progress-fill');
    const progressText = document.querySelector('.progress-text');
    
    if (progressFill) {
      const percentage = ((this.currentStep + 1) / this.steps.length) * 100;
      progressFill.style.width = `${percentage}%`;
    }
    
    if (progressText) {
      progressText.textContent = `Step ${this.currentStep + 1} of ${this.steps.length}`;
    }
  }
  
  animateStep() {
    const stepContainer = document.querySelector('.step-container');
    if (stepContainer) {
      stepContainer.style.opacity = '0';
      stepContainer.style.transform = 'translateX(20px)';
      
      setTimeout(() => {
        stepContainer.style.opacity = '1';
        stepContainer.style.transform = 'translateX(0)';
      }, 100);
    }
  }
}

// Initialize wizard when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  new SynapseWizard();
});

// Add completion styles
const style = document.createElement('style');
style.textContent = `
  .wizard-complete {
    text-align: center;
    padding: var(--space-12);
  }
  
  .success-icon {
    font-size: 4rem;
    margin-bottom: var(--space-6);
    animation: bounce 1s ease-in-out;
  }
  
  .wizard-complete h2 {
    color: var(--success-green-dark);
    font-size: 2.5rem;
    margin-bottom: var(--space-4);
  }
  
  .wizard-complete p {
    font-size: 1.25rem;
    color: var(--gray-600);
    margin-bottom: var(--space-8);
  }
  
  .completion-actions {
    display: flex;
    gap: var(--space-4);
    justify-content: center;
    flex-wrap: wrap;
  }
  
  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateY(0);
    }
    40% {
      transform: translateY(-20px);
    }
    60% {
      transform: translateY(-10px);
    }
  }
  
  .step-container {
    transition: opacity 0.3s ease, transform 0.3s ease;
  }
`;
document.head.appendChild(style);
