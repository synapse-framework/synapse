// Synapse Framework Getting Started Wizard
// Interactive step-by-step guide

class SynapseWizard {
  constructor() {
    this.currentStep = 0;
    this.steps = [
      {
        title: "Welcome to Synapse",
        description: "Let's get you started with the most powerful TypeScript framework with zero dependencies.",
        content: "Synapse is a comprehensive TypeScript framework designed for modern web development. It provides everything you need to build robust, scalable applications without external dependencies.",
        codeExample: `// Install Synapse
npm install @snps/core @snps/routing @snps/database

// Or use individual packages
npm install @snps/auth @snps/templating @snps/testing`
      },
      {
        title: "Core Setup",
        description: "Set up your first Synapse application with the core framework.",
        content: "Start by creating a basic server with Synapse Core. This gives you HTTP server capabilities, middleware support, and performance monitoring.",
        codeExample: `import { Server } from '@snps/core';

const app = new Server({
  port: 3000,
  host: 'localhost'
});

app.get('/', (req, res) => {
  res.json({ message: 'Hello from Synapse!' });
});

app.start(() => {
  console.log('Server running on http://localhost:3000');
});`
      },
      {
        title: "Routing System",
        description: "Learn how to handle routes and middleware with Synapse Routing.",
        content: "Synapse provides a powerful routing system with path matching, parameters, and middleware support.",
        codeExample: `import { Router } from '@snps/routing';

const router = new Router();

// Basic routes
router.get('/users', (req, res) => {
  res.json({ users: [] });
});

router.post('/users', (req, res) => {
  const user = req.body;
  res.json({ user });
});`
      },
      {
        title: "Database Integration",
        description: "Connect to your database with Synapse Database.",
        content: "Synapse includes a powerful database layer with ORM capabilities, query builder, and model relationships.",
        codeExample: `import { Database, Model } from '@snps/database';

const db = new Database();

class User extends Model {
  static tableName = 'users';
  
  constructor(data) {
    super(data);
    this.name = data.name;
    this.email = data.email;
  }
}

// Create a user
const user = new User({ name: 'John', email: 'john@example.com' });
await user.save();`
      },
      {
        title: "Authentication",
        description: "Secure your application with Synapse Auth.",
        content: "Implement robust authentication and authorization with OAuth2, JWT, and security features.",
        codeExample: `import { AuthManager } from '@snps/auth';

const auth = new AuthManager({
  secret: 'your-secret-key',
  expiresIn: '24h'
});

// Register user
await auth.register('user@example.com', 'password');

// Login user
const token = await auth.login('user@example.com', 'password');`
      },
      {
        title: "Templating Engine",
        description: "Create dynamic content with Synapse Templating.",
        content: "Build dynamic web pages with Synapse's powerful templating engine supporting variables, conditionals, and loops.",
        codeExample: `import { TemplateEngine } from '@snps/templating';

const engine = new TemplateEngine();

const template = \`
<h1>Welcome {{user.name}}!</h1>
{% if user.isAdmin %}
  <p>Admin panel access granted</p>
{% endif %}
\`;

const html = engine.render(template, { user: { name: 'John', isAdmin: true } });`
      },
      {
        title: "Testing Framework",
        description: "Test your application with Synapse Testing.",
        content: "Ensure your code quality with Synapse's comprehensive testing framework including mocks, spies, and coverage tools.",
        codeExample: `import { TestRunner, Mock } from '@snps/testing';

const runner = new TestRunner();

runner.test('User creation', async () => {
  const mockDb = new Mock();
  const user = new User({ name: 'Test' });
  
  expect(user.name).toBe('Test');
  expect(mockDb.save).toHaveBeenCalled();
});

runner.run();`
      },
      {
        title: "Advanced Features",
        description: "Explore Synapse's advanced capabilities.",
        content: "Synapse includes many advanced features like GraphQL, microservices, AI/ML integration, and more.",
        codeExample: `// GraphQL Support
import { GraphQLServer } from '@snps/graphql';

const server = new GraphQLServer({
  typeDefs: \`
    type User {
      id: ID!
      name: String!
      email: String!
    }
    
    type Query {
      users: [User]
    }
  \`,
  resolvers: {
    Query: {
      users: () => db.find('users')
    }
  }
});

// AI Integration
import { AIManager } from '@snps/ai';

const ai = new AIManager();
const response = await ai.generateText('Explain TypeScript');
console.log(response);`
      },
      {
        title: "Performance Optimization",
        description: "Optimize your Synapse application for production.",
        content: "Synapse includes built-in performance monitoring, caching, and optimization features.",
        codeExample: `import { PerformanceMonitor } from '@snps/core';

const monitor = new PerformanceMonitor();

// Enable caching
app.use(monitor.cache());

// Monitor performance
monitor.on('slow-request', (data) => {
  console.log('Slow request detected:', data);
});`
      },
      {
        title: "Deployment",
        description: "Deploy your Synapse application to production.",
        content: "Learn how to deploy your Synapse application with Docker, CI/CD, and monitoring.",
        codeExample: `# Dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["npm", "start"]`
      },
      {
        title: "Best Practices",
        description: "Follow Synapse best practices for production applications.",
        content: "Learn about security, performance, and maintainability best practices for Synapse applications.",
        codeExample: `// Security best practices
app.use(helmet());
app.use(rateLimit());

// Error handling
app.use((err, req, res, next) => {
  console.error(err);
  res.status(500).json({ error: 'Internal server error' });
});`
      },
      {
        title: "Congratulations!",
        description: "You're ready to build amazing applications with Synapse!",
        content: "You've completed the Synapse getting started guide. You now have all the knowledge to build powerful, scalable applications.",
        codeExample: `// Your first Synapse app
import { Server } from '@snps/core';
import { Router } from '@snps/routing';
import { Database } from '@snps/database';

const app = new Server();
const router = new Router();
const db = new Database();

// Build something amazing!
app.start(() => {
  console.log('Your Synapse app is running!');
});`
      }
    ];
    
    this.init();
  }
  
  init() {
    this.renderStep();
    this.updateProgress();
    this.bindEvents();
  }
  
  renderStep() {
    const step = this.steps[this.currentStep];
    const stepContainer = document.querySelector('.step-container');
    
    if (stepContainer) {
      stepContainer.innerHTML = `
        <h2>${step.title}</h2>
        <p>${step.description}</p>
        <div class="step-content">
          ${step.content}
        </div>
        <div class="code-example">
          <h4>Code Example:</h4>
          <pre><code>${step.codeExample || 'No code example available'}</code></pre>
          <button class="btn btn-secondary copy-code">Copy Code</button>
        </div>
        <div class="step-actions">
          ${this.currentStep > 0 ? '<button class="btn btn-outline prev-step">Previous</button>' : ''}
          ${this.currentStep < this.steps.length - 1 ? '<button class="btn btn-primary next-step">Next Step</button>' : '<button class="btn btn-success complete-wizard">Complete</button>'}
        </div>
      `;
    }
    
    // Re-bind copy button events
    this.bindCopyButtons();
  }
  
  bindEvents() {
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('next-step')) {
        this.nextStep();
      } else if (e.target.classList.contains('prev-step')) {
        this.prevStep();
      } else if (e.target.classList.contains('complete-wizard')) {
        this.completeWizard();
      }
    });
  }
  
  bindCopyButtons() {
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('copy-code')) {
        const codeBlock = e.target.previousElementSibling.querySelector('code');
        if (codeBlock) {
          navigator.clipboard.writeText(codeBlock.textContent).then(() => {
            e.target.textContent = 'Copied!';
            setTimeout(() => {
              e.target.textContent = 'Copy Code';
            }, 2000);
          });
        }
      }
    });
  }
  
  nextStep() {
    if (this.currentStep < this.steps.length - 1) {
      this.currentStep++;
      this.renderStep();
      this.updateProgress();
      this.animateStep();
    }
  }
  
  prevStep() {
    if (this.currentStep > 0) {
      this.currentStep--;
      this.renderStep();
      this.updateProgress();
      this.animateStep();
    }
  }
  
  completeWizard() {
    const wizardContainer = document.querySelector('.wizard-container');
    if (wizardContainer) {
      wizardContainer.innerHTML = `
        <div class="wizard-complete">
          <div class="success-icon">ðŸŽ‰</div>
          <h2>Congratulations!</h2>
          <p>You've completed the Synapse getting started wizard. You're now ready to build amazing applications!</p>
          <div class="completion-actions">
            <a href="./api" class="btn btn-primary">Explore API</a>
            <a href="./examples" class="btn btn-secondary">View Examples</a>
            <a href="./" class="btn btn-outline">Back to Home</a>
          </div>
        </div>
      `;
    }
  }
  
  updateProgress() {
    const progressFill = document.querySelector('.progress-fill');
    const progressText = document.querySelector('.progress-text');
    
    if (progressFill) {
      const percentage = ((this.currentStep + 1) / this.steps.length) * 100;
      progressFill.style.width = `${percentage}%`;
    }
    
    if (progressText) {
      progressText.textContent = `Step ${this.currentStep + 1} of ${this.steps.length}`;
    }
  }
  
  animateStep() {
    const stepContainer = document.querySelector('.step-container');
    if (stepContainer) {
      stepContainer.style.opacity = '0';
      stepContainer.style.transform = 'translateX(20px)';
      
      setTimeout(() => {
        stepContainer.style.opacity = '1';
        stepContainer.style.transform = 'translateX(0)';
      }, 100);
    }
  }
}

// Initialize wizard when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  new SynapseWizard();
});

// Add completion styles
const style = document.createElement('style');
style.textContent = `
  .wizard-complete {
    text-align: center;
    padding: var(--space-12);
  }
  
  .success-icon {
    font-size: 4rem;
    margin-bottom: var(--space-6);
    animation: bounce 1s ease-in-out;
  }
  
  .wizard-complete h2 {
    color: var(--success-green-dark);
    font-size: 2.5rem;
    margin-bottom: var(--space-4);
  }
  
  .wizard-complete p {
    font-size: 1.25rem;
    color: var(--gray-600);
    margin-bottom: var(--space-8);
  }
  
  .completion-actions {
    display: flex;
    gap: var(--space-4);
    justify-content: center;
    flex-wrap: wrap;
  }
  
  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateY(0);
    }
    40% {
      transform: translateY(-10px);
    }
    60% {
      transform: translateY(-10px);
    }
  }
  
  .step-container {
    transition: opacity 0.3s ease, transform 0.3s ease;
  }
`;
document.head.appendChild(style);
