import { DocumentationService } from '../index';
import assert from 'node:assert';

/**
 * Test suite for comprehensive Synapse documentation system
 * Following TDD principles - tests first, then implementation
 */
class DocumentationTestSuite {
  private service: DocumentationService;

  constructor() {
    this.service = new DocumentationService();
  }

  async runAllTests(): Promise<void> {
    console.log('üß™ Running Synapse Documentation Test Suite...\n');

    await this.testPackageCoverage();
    await this.testGettingStartedWizard();
    await this.testInteractiveExamples();
    await this.testAPIReferenceCompleteness();
    await this.testDesignPatterns();
    await this.testCleanCodePrinciples();
    await this.testTDDApproach();
    await this.testPerformanceOptimization();
    await this.testAccessibility();
    await this.testSEOOptimization();

    console.log('\n‚úÖ All documentation tests passed!');
  }

  private async testPackageCoverage(): Promise<void> {
    console.log('üì¶ Testing package coverage...');
    
    const expectedPackages = [
      // Core packages
      'core', 'routing', 'database', 'auth', 'templating', 'testing',
      // Enterprise packages  
      'graphql', 'microservices', 'api-docs', 'file-upload', 'email', 'notifications',
      // Next-gen packages
      'ai', 'blockchain', 'collaboration', 'workflow',
      // Futuristic packages
      'pwa', 'voice', 'webassembly', 'webrtc',
      // Development tools
      'cli', 'docs'
    ];

    const documentedPackages = await this.service.getDocumentedPackages();
    
    for (const pkg of expectedPackages) {
      assert(documentedPackages.includes(pkg), `Package ${pkg} not documented`);
    }
    
    console.log('  ‚úÖ All 21 packages documented');
  }

  private async testGettingStartedWizard(): Promise<void> {
    console.log('üöÄ Testing getting started wizard...');
    
    const wizard = await this.service.getGettingStartedWizard();
    
    assert(wizard.steps.length >= 5, 'Wizard should have at least 5 steps');
    assert(wizard.steps[0].title.includes('Installation'), 'First step should be installation');
    assert(wizard.steps.some(s => s.type === 'interactive'), 'Should have interactive steps');
    assert(wizard.steps.some(s => s.codeExample), 'Should have code examples');
    
    console.log('  ‚úÖ Getting started wizard complete');
  }

  private async testInteractiveExamples(): Promise<void> {
    console.log('üéÆ Testing interactive examples...');
    
    const examples = await this.service.getInteractiveExamples();
    
    assert(examples.length > 0, 'Should have interactive examples');
    assert(examples.some(e => e.isRunnable), 'Should have runnable examples');
    assert(examples.some(e => e.isInteractive), 'Should have interactive examples');
    
    console.log('  ‚úÖ Interactive examples working');
  }

  private async testAPIReferenceCompleteness(): Promise<void> {
    console.log('üìö Testing API reference completeness...');
    
    const apiRef = await this.service.getAPIReference();
    
    assert(apiRef.packages.length === 21, 'Should document all 21 packages');
    assert(apiRef.packages.every(p => p.classes.length > 0), 'Each package should have classes');
    assert(apiRef.packages.every(p => p.methods.length > 0), 'Each package should have methods');
    assert(apiRef.packages.every(p => p.examples.length > 0), 'Each package should have examples');
    
    console.log('  ‚úÖ API reference complete');
  }

  private async testDesignPatterns(): Promise<void> {
    console.log('üèóÔ∏è Testing design patterns documentation...');
    
    const patterns = await this.service.getDesignPatterns();
    
    assert(patterns.includes('Factory Pattern'), 'Should document Factory Pattern');
    assert(patterns.includes('Observer Pattern'), 'Should document Observer Pattern');
    assert(patterns.includes('Strategy Pattern'), 'Should document Strategy Pattern');
    assert(patterns.includes('Builder Pattern'), 'Should document Builder Pattern');
    
    console.log('  ‚úÖ Design patterns documented');
  }

  private async testCleanCodePrinciples(): Promise<void> {
    console.log('üßπ Testing clean code principles...');
    
    const principles = await this.service.getCleanCodePrinciples();
    
    assert(principles.includes('Single Responsibility'), 'Should cover SRP');
    assert(principles.includes('Open/Closed'), 'Should cover OCP');
    assert(principles.includes('Dependency Inversion'), 'Should cover DIP');
    assert(principles.includes('Test-Driven Development'), 'Should cover TDD');
    
    console.log('  ‚úÖ Clean code principles covered');
  }

  private async testTDDApproach(): Promise<void> {
    console.log('üîÑ Testing TDD approach...');
    
    const tddContent = await this.service.getTDDContent();
    
    assert(tddContent.includes('Red-Green-Refactor'), 'Should explain RGR cycle');
    assert(tddContent.includes('Test First'), 'Should emphasize test-first approach');
    assert(tddContent.includes('100% Coverage'), 'Should mention 100% coverage goal');
    
    console.log('  ‚úÖ TDD approach documented');
  }

  private async testPerformanceOptimization(): Promise<void> {
    console.log('‚ö° Testing performance optimization...');
    
    const perf = await this.service.getPerformanceContent();
    
    assert(perf.includes('Caching'), 'Should cover caching');
    assert(perf.includes('Code Splitting'), 'Should cover code splitting');
    assert(perf.includes('Lazy Loading'), 'Should cover lazy loading');
    assert(perf.includes('Bundle Optimization'), 'Should cover bundle optimization');
    
    console.log('  ‚úÖ Performance optimization covered');
  }

  private async testAccessibility(): Promise<void> {
    console.log('‚ôø Testing accessibility...');
    
    const a11y = await this.service.getAccessibilityContent();
    
    assert(a11y.includes('WCAG'), 'Should mention WCAG guidelines');
    assert(a11y.includes('Screen Reader'), 'Should cover screen reader support');
    assert(a11y.includes('Keyboard Navigation'), 'Should cover keyboard navigation');
    
    console.log('  ‚úÖ Accessibility covered');
  }

  private async testSEOOptimization(): Promise<void> {
    console.log('üîç Testing SEO optimization...');
    
    const seo = await this.service.getSEOContent();
    
    assert(seo.includes('Meta Tags'), 'Should cover meta tags');
    assert(seo.includes('Structured Data'), 'Should cover structured data');
    assert(seo.includes('Sitemap'), 'Should mention sitemap');
    
    console.log('  ‚úÖ SEO optimization covered');
  }
}

// Run tests if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  const testSuite = new DocumentationTestSuite();
  testSuite.runAllTests().catch(console.error);
}

export { DocumentationTestSuite };
