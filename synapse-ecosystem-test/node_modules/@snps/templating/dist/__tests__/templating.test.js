import { test, describe } from 'node:test';
import assert from 'node:assert';
import { TemplateEngine } from '../index.js';
describe('TemplateEngine', () => {
    test('should be an instance of TemplateEngine', () => {
        const templateEngine = new TemplateEngine();
        assert(templateEngine instanceof TemplateEngine);
    });
    test('should render simple template with variables', async () => {
        const templateEngine = new TemplateEngine();
        const template = 'Hello {{name}}!';
        const data = { name: 'World' };
        const result = await templateEngine.render(template, data);
        assert.strictEqual(result, 'Hello World!');
    });
    test('should render template with multiple variables', async () => {
        const templateEngine = new TemplateEngine();
        const template = '{{greeting}} {{name}}, you are {{age}} years old.';
        const data = { greeting: 'Hello', name: 'John', age: 25 };
        const result = await templateEngine.render(template, data);
        assert.strictEqual(result, 'Hello John, you are 25 years old.');
    });
    test('should handle missing variables gracefully', async () => {
        const templateEngine = new TemplateEngine();
        const template = 'Hello {{name}}! Your status is {{status}}.';
        const data = { name: 'World' };
        const result = await templateEngine.render(template, data);
        assert.strictEqual(result, 'Hello World! Your status is .');
    });
    test('should render conditional blocks', async () => {
        const templateEngine = new TemplateEngine();
        const template = 'Hello {{name}}!{{#if isAdmin}} You are an admin.{{/if}}';
        const data = { name: 'John', isAdmin: true };
        const result = await templateEngine.render(template, data);
        assert.strictEqual(result, 'Hello John! You are an admin.');
    });
    test('should skip conditional blocks when condition is false', async () => {
        const templateEngine = new TemplateEngine();
        const template = 'Hello {{name}}!{{#if isAdmin}} You are an admin.{{/if}}';
        const data = { name: 'John', isAdmin: false };
        const result = await templateEngine.render(template, data);
        assert.strictEqual(result, 'Hello John!');
    });
    test('should render loops', async () => {
        const templateEngine = new TemplateEngine();
        const template = 'Items:{{#each items}} {{this}}{{/each}}';
        const data = { items: ['apple', 'banana', 'cherry'] };
        const result = await templateEngine.render(template, data);
        assert.strictEqual(result, 'Items: apple banana cherry');
    });
    test('should handle empty loops', async () => {
        const templateEngine = new TemplateEngine();
        const template = 'Items:{{#each items}} {{this}}{{/each}}';
        const data = { items: [] };
        const result = await templateEngine.render(template, data);
        assert.strictEqual(result, 'Items:');
    });
    test('should render nested objects', async () => {
        const templateEngine = new TemplateEngine();
        const template = 'User: {{user.name}} ({{user.email}})';
        const data = { user: { name: 'John Doe', email: 'john@example.com' } };
        const result = await templateEngine.render(template, data);
        assert.strictEqual(result, 'User: John Doe (john@example.com)');
    });
    test('should escape HTML by default', async () => {
        const templateEngine = new TemplateEngine();
        const template = 'Message: {{message}}';
        const data = { message: '<script>alert("xss")</script>' };
        const result = await templateEngine.render(template, data);
        assert.strictEqual(result, 'Message: &lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;');
    });
    test('should allow unescaped HTML with triple braces', async () => {
        const templateEngine = new TemplateEngine();
        const template = 'Message: {{{message}}}';
        const data = { message: '<strong>Bold text</strong>' };
        const result = await templateEngine.render(template, data);
        assert.strictEqual(result, 'Message: <strong>Bold text</strong>');
    });
    test('should load and render .webml file', async () => {
        const templateEngine = new TemplateEngine();
        const result = await templateEngine.renderFile('test.webml', { name: 'Test' });
        assert.strictEqual(result.trim(), 'Hello Test from .webml file!');
    });
    test('should handle file not found gracefully', async () => {
        const templateEngine = new TemplateEngine();
        try {
            await templateEngine.renderFile('nonexistent.webml', {});
            assert.fail('Should have thrown an error');
        }
        catch (error) {
            assert(error instanceof Error);
            assert(error.message.includes('not found'));
        }
    });
});
//# sourceMappingURL=templating.test.js.map