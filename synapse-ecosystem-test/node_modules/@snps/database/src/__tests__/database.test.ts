import { test, describe, before, after } from 'node:test';
import assert from 'node:assert';
import { Database, QueryBuilder, Model } from '../index.js';

describe('Database', () => {
  let db: Database;

  before(async () => {
    db = new Database();
    await db.connect();
  });

  after(async () => {
    await db.disconnect();
  });

  test('should set and get a value', async () => {
    await db.set('testCollection', 'foo', 'bar');
    const value = await db.get('testCollection', 'foo');
    assert.strictEqual(value, 'bar');
  });

  test('should delete a value', async () => {
    await db.set('testCollection', 'foo', 'bar');
    await db.delete('testCollection', 'foo');
    const value = await db.get('testCollection', 'foo');
    assert.strictEqual(value, undefined);
  });

  test('should set and get values in different collections', async () => {
    await db.set('collection1', 'key1', 'value1');
    await db.set('collection2', 'key2', 'value2');

    const value1 = await db.get('collection1', 'key1');
    const value2 = await db.get('collection2', 'key2');

    assert.strictEqual(value1, 'value1');
    assert.strictEqual(value2, 'value2');
  });

  test('should clear a specific collection', async () => {
    await db.set('collectionA', 'keyA', 'valueA');
    await db.set('collectionB', 'keyB', 'valueB');

    await db.clear('collectionA');

    const valueA = await db.get('collectionA', 'keyA');
    const valueB = await db.get('collectionB', 'keyB');

    assert.strictEqual(valueA, undefined);
    assert.strictEqual(valueB, 'valueB');
  });

  test('should clear all collections if no collection name is provided', async () => {
    await db.set('collectionX', 'keyX', 'valueX');
    await db.set('collectionY', 'keyY', 'valueY');

    await db.clear();

    const valueX = await db.get('collectionX', 'keyX');
    const valueY = await db.get('collectionY', 'keyY');

    assert.strictEqual(valueX, undefined);
    assert.strictEqual(valueY, undefined);
  });

  test('should return undefined for a non-existent key in an existing collection', async () => {
    await db.set('myCollection', 'existingKey', 'existingValue');
    const value = await db.get('myCollection', 'nonExistentKey');
    assert.strictEqual(value, undefined);
  });

  test('should return undefined for a key in a non-existent collection', async () => {
    const value = await db.get('nonExistentCollection', 'someKey');
    assert.strictEqual(value, undefined);
  });

  test('should find documents with query', async () => {
    await db.set('users', '1', { name: 'John', age: 30, active: true });
    await db.set('users', '2', { name: 'Jane', age: 25, active: false });
    await db.set('users', '3', { name: 'Bob', age: 35, active: true });
    
    const activeUsers = await db.find('users', { active: true });
    assert.strictEqual(activeUsers.length, 2);
    assert.strictEqual(activeUsers[0].name, 'John');
    assert.strictEqual(activeUsers[1].name, 'Bob');
  });

  test('should find documents with complex query', async () => {
    await db.set('users', '1', { name: 'John', age: 30, city: 'New York' });
    await db.set('users', '2', { name: 'Jane', age: 25, city: 'Boston' });
    await db.set('users', '3', { name: 'Bob', age: 35, city: 'New York' });
    
    const nyUsers = await db.find('users', { city: 'New York' });
    assert.strictEqual(nyUsers.length, 2);
    
    const oldUsers = await db.find('users', { age: { $gte: 30 } });
    assert.strictEqual(oldUsers.length, 2);
  });

  test('should update documents', async () => {
    await db.set('users', '1', { name: 'John', age: 30 });
    await db.update('users', '1', { age: 31 });
    const user = await db.get('users', '1');
    assert.strictEqual(user.age, 31);
    assert.strictEqual(user.name, 'John');
  });

  test('should count documents', async () => {
    await db.set('users', '1', { name: 'John', age: 30 });
    await db.set('users', '2', { name: 'Jane', age: 25 });
    await db.set('users', '3', { name: 'Bob', age: 35 });
    
    const count = await db.count('users');
    assert.strictEqual(count, 3);
    
    const activeCount = await db.count('users', { age: { $gte: 30 } });
    assert.strictEqual(activeCount, 2);
  });
});

describe('QueryBuilder', () => {
  test('should build simple query', () => {
    const query = new QueryBuilder()
      .where('name', 'John')
      .where('age', 30)
      .build();
    
    assert.deepStrictEqual(query, { name: 'John', age: 30 });
  });

  test('should build query with operators', () => {
    const query = new QueryBuilder()
      .where('age', { $gte: 18, $lt: 65 })
      .where('status', { $in: ['active', 'pending'] })
      .build();
    
    assert.deepStrictEqual(query, { 
      age: { $gte: 18, $lt: 65 },
      status: { $in: ['active', 'pending'] }
    });
  });

  test('should build query with OR conditions', () => {
    const query = new QueryBuilder()
      .orWhere('name', 'John')
      .orWhere('name', 'Jane')
      .build();
    
    assert.deepStrictEqual(query, { 
      $or: [
        { name: 'John' },
        { name: 'Jane' }
      ]
    });
  });
});

describe('Model', () => {
  class User extends Model {
    static tableName = 'users';
    
    name: string = '';
    age: number = 0;
    email: string = '';
  }

  test('should create model instance', () => {
    const user = new User();
    assert(user instanceof User);
    assert(user instanceof Model);
  });

  test('should save model to database', async () => {
    const testDb = new Database();
    await testDb.connect();
    User.setDatabase(testDb);
    
    const user = new User();
    user.name = 'John';
    user.age = 30;
    user.email = 'john@example.com';
    
    await user.save();
    assert(user.id !== undefined);
    
    const savedUser = await User.findById(user.id!) as User;
    assert.strictEqual(savedUser?.name, 'John');
    assert.strictEqual(savedUser?.age, 30);
  });

  test('should find models by query', async () => {
    const testDb = new Database();
    await testDb.connect();
    User.setDatabase(testDb);
    
    const user1 = new User();
    user1.name = 'John';
    user1.age = 30;
    await user1.save();
    
    const user2 = new User();
    user2.name = 'Jane';
    user2.age = 25;
    await user2.save();
    
    const users = await User.find({ age: { $gte: 30 } }) as User[];
    assert.strictEqual(users.length, 1);
    assert.strictEqual(users[0]?.name, 'John');
  });

  test('should update model', async () => {
    const testDb = new Database();
    await testDb.connect();
    User.setDatabase(testDb);
    
    const user = new User();
    user.name = 'John';
    user.age = 30;
    await user.save();
    
    user.age = 31;
    await user.save();
    
    const updatedUser = await User.findById(user.id!) as User;
    assert.strictEqual(updatedUser?.age, 31);
  });

  test('should delete model', async () => {
    const testDb = new Database();
    await testDb.connect();
    User.setDatabase(testDb);
    
    const user = new User();
    user.name = 'John';
    user.age = 30;
    await user.save();
    
    await user.delete();
    
    const deletedUser = await User.findById(user.id!);
    assert.strictEqual(deletedUser, null);
  });
});
