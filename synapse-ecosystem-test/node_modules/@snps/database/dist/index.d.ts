export interface QueryOperators {
    $eq?: any;
    $ne?: any;
    $gt?: any;
    $gte?: any;
    $lt?: any;
    $lte?: any;
    $in?: any[];
    $nin?: any[];
    $exists?: boolean;
    $regex?: string;
    $or?: Record<string, any>[];
    $and?: Record<string, any>[];
}
export type Query = Record<string, any | QueryOperators>;
export declare class QueryBuilder {
    private conditions;
    where(field: string, value: any): QueryBuilder;
    orWhere(field: string, value: any): QueryBuilder;
    andWhere(field: string, value: any): QueryBuilder;
    build(): Query;
}
export declare abstract class Model {
    id?: string;
    protected static database?: Database;
    static setDatabase(database: Database): void;
    save(): Promise<void>;
    delete(): Promise<void>;
    static findById(id: string): Promise<Model | null>;
    static find(query?: Query): Promise<Model[]>;
    protected toJSON(): Record<string, any>;
}
export declare class Database {
    private data;
    private connected;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    set(collectionName: string, key: string, value: any): Promise<void>;
    get(collectionName: string, key: string): Promise<any>;
    delete(collectionName: string, key: string): Promise<void>;
    clear(collectionName?: string): Promise<void>;
    find(collectionName: string, query?: Query): Promise<any[]>;
    update(collectionName: string, key: string, updates: Record<string, any>): Promise<void>;
    count(collectionName: string, query?: Query): Promise<number>;
    private matchesQuery;
    private getNestedValue;
}
//# sourceMappingURL=index.d.ts.map
