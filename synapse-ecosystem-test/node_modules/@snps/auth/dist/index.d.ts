export declare class Auth {
    private authorizationCodes;
    private accessTokens;
    private csrfTokens;
    private jwtSecret;
    hash(password: string): Promise<string>;
    compare(password: string, hash: string): Promise<boolean>;
    issueAuthorizationCode(clientId: string, redirectUri: string, scope: string, state: string): Promise<string>;
    exchangeAuthorizationCodeForToken(clientId: string, redirectUri: string, code: string): Promise<string | null>;
    validateAccessToken(token: string): Promise<boolean>;
    generateCSRFToken(): Promise<string>;
    validateCSRFToken(token: string): Promise<boolean>;
    generateJWT(payload: Record<string, any>): Promise<string>;
    verifyJWT(token: string): Promise<Record<string, any> | null>;
}
export declare class SecurityManager {
    private rateLimitMap;
    sanitizeInput(input: string): string;
    isValidEmail(email: string): boolean;
    isStrongPassword(password: string): boolean;
    detectSQLInjection(input: string): boolean;
    detectXSS(input: string): boolean;
    checkRateLimit(clientId: string, maxRequests: number, windowMs: number): Promise<boolean>;
    generateSecureToken(length?: number): string;
    hashWithSalt(input: string, salt?: string): string;
    verifyHash(input: string, hash: string): boolean;
}
export declare class SessionManager {
    private sessions;
    createSession(userId: string, data?: Record<string, any>, expiresInMs?: number): Promise<string>;
    validateSession(sessionId: string): Promise<boolean>;
    getSessionData(sessionId: string): Promise<Record<string, any> | null>;
    updateSessionData(sessionId: string, data: Record<string, any>): Promise<boolean>;
    destroySession(sessionId: string): Promise<boolean>;
    destroyAllUserSessions(userId: string): Promise<number>;
    cleanupExpiredSessions(): Promise<number>;
}
//# sourceMappingURL=index.d.ts.map
