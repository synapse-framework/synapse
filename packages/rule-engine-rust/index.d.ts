/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface Rule {
  id: string
  category?: string
  severity: string
  title: string
  description: string
  remediation: string
  pattern?: string
  logic: string
  tags: Array<string>
  createdAt: string
  updatedAt: string
}
export interface Violation {
  id: string
  ruleId: string
  filePath: string
  lineNumber?: number
  columnNumber?: number
  message: string
  severity: string
  category: string
  autoFixable: boolean
  suggestedFix?: string
  createdAt: string
}
export interface DataSource {
  id: string
  name: string
  url: string
  lastChecked?: string
  lastUpdated?: string
  data: any
}
export interface CacheEntry {
  key: string
  data: any
  expiresAt: string
  createdAt: string
}
export interface RuleResult {
  violations: Array<Violation>
  summary: RuleSummary
  executionTimeMs: number
}
export interface RuleSummary {
  totalViolations: number
  criticalCount: number
  highCount: number
  mediumCount: number
  lowCount: number
  autoFixableCount: number
  categories: Record<string, number>
}
export declare class RuleEngine {
  constructor()
  addRule(rule: Rule): void
  addRules(rules: Array<Rule>): void
  addDataSource(source: DataSource): void
  loadRulesFromFile(filePath: string): void
  checkFile(filePath: string): RuleResult
  checkDirectory(dirPath: string): RuleResult
  getRules(): Array<Rule>
  getRuleById(ruleId: string): Rule | null
  updateRule(ruleId: string, updatedRule: Rule): boolean
  deleteRule(ruleId: string): boolean
  clearCache(): void
  getCacheStats(): Record<string, number>
}
